app:
  title: VIZIO Backstage Local Deployment
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: http://localhost:3000
  extensions:
    - entity-card:announcements/announcements
    - nav-item:announcements
auth:
  environment: development
  providers:
    guest: {}
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
backend:
  baseUrl: http://localhost:7007
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
  listen:
    port: 7007

scaffolder:
# see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  # Overrides the default list locations from app-config.yaml as these contain example data.
  # See https://backstage.io/docs/features/software-catalog/#adding-components-to-the-catalog for more details
  # on how to get entities into the catalog.
  providers:
    githubOrg:
      - id: Vizio-Backstage
        githubUrl: 'https://github.com'
        orgs: ['BuddyTV', 'vizio-plat-svcs', 'vizio-ad-tech', 'CognitiveNetworks']
        schedule:
          frequency: PT60M
          timeout: PT15M

integrations:
  github:
    - host: github.com
      orgs:
        - BuddyTV
        - vizio-plat-svcs
        - vizio-ad-tech
        - CognitiveNetworks
      apps:
        - appId: ${GITHUB_APP_ID}
          privateKey: ${GITHUB_APP_PRIVATE_KEY}
          clientId: ${GITHUB_CLIENT_ID}
          clientSecret: ${GITHUB_CLIENT_SECRET}
          webhookSecret: ${GITHUB_WEBHOOK_SECRET}

pagerDuty:
  apiBaseUrl: https://api.pagerduty.com
  apiToken: ${COGNET_PAGERDUTY_API_KEY}
  apiTokenVizio: ${VIZIO_PAGERDUTY_API_KEY}
  apiTokenCognet: ${COGNET_PAGERDUTY_API_KEY}

sonarqube:
  baseUrl: ${SONARQUBE_URL}
  apiKey: ${SONARQUBE_API_KEY}

techdocs:
  builder: local
  publisher:
    type: local
  generator:
    runIn: local
  cache:
    # 2 Hours (in milliseconds)
    ttl: 7200000
    # 20 Seconds (in milliseconds)
    readTimeout: 20000

techInsights:
  factRetrievers:
    entityMetadataFactRetriever:
      # How often the fact retriever should run
      cadence: '0 * * * *'
      # How long to keep the fact data
      lifecycle: { timeToLive: { months: 6 } }
    entityOwnershipFactRetriever:
      cadence: '0 * * * *'
      lifecycle: { timeToLive: { months: 6 } }
    techdocsFactRetriever:
      cadence: '0 * * * *'
      lifecycle: { timeToLive: { months: 6 } }
  factChecker:
    checks:
      groupOwnerCheck:
        type: json-rules-engine
        name: Group Owner Check
        description: Verifies that a group has been set as the spec.owner for this entity
        factIds:
          - entityOwnershipFactRetriever
        rule:
          conditions:
            all:
              - fact: hasGroupOwner
                operator: equal
                value: true
      titleCheck:
        type: json-rules-engine
        name: Title Check
        description: Verifies that a Title, used to improve readability, has been set for this entity
        factIds:
          - entityMetadataFactRetriever
        rule:
          conditions:
            all:
              - fact: hasTitle
                operator: equal
                value: true
      techDocsCheck:
        type: json-rules-engine
        name: TechDocs Check
        description: Verifies that a TechDocs, has been enabled for this entity
        factIds:
          - techdocsFactRetriever
        rule:
          conditions:
            all:
              - fact: hasAnnotationBackstageIoTechdocsRef
                operator: equal
                value: true
      sonarQubeProjectExistsCheck:
        type: json-rules-engine
        name: SonarQube Project Exists Check
        description: Verifies that a TechDocs, has been enabled for this entity
        factIds:
          - sonarQubeFactRetriever
        rule:
          conditions:
            all:
              - fact: sonarQubeProjectExists
                operator: equal
                value: true
      sonarQubeCoverageCheck:
        type: json-rules-engine
        name: SonarQube Coverage Check
        description: Verifies that a TechDocs, has been enabled for this entity
        factIds:
          - sonarQubeFactRetriever
        rule:
          conditions:
            all:
              - fact: sonarQubeCoverage
                operator: greaterThanInclusive
                value: 70
      pagerDutyServiceExistsCheck:
        type: json-rules-engine
        name: PagerDuty Service Exists Check
        description: Checks if the PagerDuty service exists for this entity
        factIds:
          - pagerDutyFactRetriever
        rule:
          conditions:
            all:
              - fact: pagerDutyServiceExists
                operator: equal
                value: true
      pagerDutyHasScheduleCheck:
        type: json-rules-engine
        name: PagerDuty Schedule Check
        description: Checks if there is a schedule associated with the PagerDuty service for this entity
        factIds:
          - pagerDutyFactRetriever
        rule:
          conditions:
            all:
              - fact: pagerDutyHasSchedule
                operator: equal
                value: true
      pagerDutyHasOnCallCheck:
        type: json-rules-engine
        name: PagerDuty On-Call Check
        description: Checks if there is someone on-call for the PagerDuty service associated with this entity
        factIds:
          - pagerDutyFactRetriever
        rule:
          conditions:
            all:
              - fact: pagerDutyHasOnCall
                operator: equal
                value: true
      protectedBranchesCheck:
        type: json-rules-engine
        name: Protected Branches Check
        description: Verifies that the main branch is protected
        factIds:
          - gitHubFactRetriever
        rule:
          conditions:
            all:
              - fact: gitHubProtectedBranches
                operator: equal
                value: true
      prApprovalRequiredCheck:
        type: json-rules-engine
        name: PR Approval Required Check
        description: Checks if PRs require approval before merging
        factIds:
          - gitHubFactRetriever
        rule:
          conditions:
            all:
              - fact: gitHubPrApprovalRequired
                operator: equal
                value: true
      noForcePushCheck:
        type: json-rules-engine
        name: No Force Push Check
        description: Checks if force-push is disallowed on protected branches
        factIds:
          - gitHubFactRetriever
        rule:
          conditions:
            all:
              - fact: gitHubNoForcePush
                operator: equal
                value: true
      ciChecksExistCheck:
        type: json-rules-engine
        name: CI Checks Exist Check
        description: Checks for CI testing with GitHub Actions
        factIds:
          - gitHubFactRetriever
        rule:
          conditions:
            all:
              - fact: gitHubCiChecksExist
                operator: equal
                value: true
permission:
  # setting this to `false` will disable permissions
  enabled: true
